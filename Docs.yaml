openapi: 3.0.0
info:
  title: Masar-App API
  description: API documentation for the Masar-App project, connecting graduates with job and training opportunities.
  version: 1.0.0

servers:
  - url: http://127.0.0.1:8000/api/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Common practice for Sanctum tokens

  schemas:
    # --- Authentication & User Schemas ---
    AuthResponse:
      type: object
      properties:
        message:
          type: string
          description: A descriptive message about the authentication process.
        access_token:
          type: string
          description: The bearer token for accessing protected routes.
        token_type:
          type: string
          description: The type of the token (always "Bearer").
        user:
          $ref: '#/components/schemas/User' # Full user object upon login/register
      required:
        - message
        - access_token
        - token_type
        - user

    User:
      type: object
      properties:
        UserID:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        email_verified:
          type: boolean # Represented as 0/1 in DB, but bool in model
        phone:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
          format: url
        status:
          type: string
          enum: [مفعل, معلق, محذوف]
        type:
          type: string
          enum: [خريج, خبير استشاري, مدير شركة, Admin]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        profile:
          $ref: '#/components/schemas/Profile'
          nullable: true # Can be null for Admin/Manager users
        skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillWithPivot' # Skills nested with pivot data
        company:
          $ref: '#/components/schemas/Company'
          nullable: true # Can be null for non-manager users
      required:
        - UserID
        - first_name
        - last_name
        - username
        - email
        - email_verified
        - status
        - type
        - created_at
        - updated_at

    PartialUser:
      type: object
      properties:
        UserID:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
      required:
        - UserID
        - first_name
        - last_name

    Profile:
      type: object
      properties:
        ProfileID:
          type: integer
          format: int64
        UserID:
          type: integer
          format: int64
        University:
          type: string
          nullable: true
        GPA:
          type: string # Or number/float
          nullable: true
        "Personal Description":
          type: string
          nullable: true
        "Technical Description":
          type: string
          nullable: true
        "Git Hyper Link":
          type: string
          nullable: true
          format: url
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - ProfileID
        - UserID
        - created_at
        - updated_at

    Skill:
      type: object
      properties:
        SkillID:
          type: integer
          format: int64
        Name:
          type: string
      required:
        - SkillID
        - Name

    SkillWithPivot:
      allOf: # Inherit properties from Skill
        - $ref: '#/components/schemas/Skill'
        - type: object
          properties:
            pivot:
              $ref: '#/components/schemas/UserSkillPivot' # Include pivot data
          required:
            - pivot

    UserSkillPivot:
      type: object
      properties:
        UserID:
          type: integer
          format: int64
        SkillID:
          type: integer
          format: int64
        Stage:
          type: string
          nullable: true
          enum: [مبتدئ, متوسط, متقدم]
      required:
        - UserID
        - SkillID

    Article:
      type: object
      properties:
        ArticleID:
          type: integer
          format: int64
        UserID:
          type: integer
          format: int64
        Title:
          type: string
        Description:
          type: string
        Date:
          type: string
          format: date # Or date-time if including time
        Type:
          type: string
          nullable: true
        "Article Photo":
          type: string
          nullable: true
          format: url # Assuming path or URL
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user: # The author (often a partial user)
          $ref: '#/components/schemas/PartialUser'
          nullable: true # Could be null if user is deleted and FK is SET NULL
      required:
        - ArticleID
        - UserID
        - Title
        - Description
        - Date
        - created_at
        - updated_at

    JobOpportunity:
      type: object
      properties:
        JobID:
          type: integer
          format: int64
        UserID:
          type: integer
          format: int64
          description: User ID of the company manager or admin who posted.
        "Job Title":
          type: string
        "Job Description":
          type: string
        Qualification:
          type: string
          nullable: true
        Site:
          type: string
          nullable: true
        Date:
          type: string
          format: date # Publish Date
        Skills:
          type: string # Stored as text/string in DB
          nullable: true
        Type:
          type: string
          enum: [وظيفة, تدريب]
        "End Date":
          type: string
          format: date
          nullable: true
        Status:
          type: string
          enum: [مفعل, معلق, محذوف]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user: # The poster (Company Manager)
          $ref: '#/components/schemas/PartialUser'
          nullable: true # Could be null if user is deleted

      required:
        - JobID
        - UserID
        - "Job Title"
        - "Job Description"
        - Date
        - Type
        - Status
        - created_at
        - updated_at

    TrainingCourse:
      type: object
      properties:
        CourseID:
          type: integer
          format: int64
        UserID:
          type: integer
          format: int64
          description: User ID of the creator (Manager, Consultant, Admin).
        "Course name":
          type: string
        "Trainers name":
          type: string
          nullable: true
        "Course Description":
          type: string
          nullable: true
        Site:
          type: string
          nullable: true
        "Trainers Site":
          type: string
          nullable: true
        "Start Date":
          type: string
          format: date
          nullable: true
        "End Date":
          type: string
          format: date
          nullable: true
        "Enroll Hyper Link":
          type: string
          nullable: true
          format: url
        Stage:
          type: string
          nullable: true
        Certificate:
          type: string # Or boolean if changed in DB/Model
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        creator: # The creator user
          $ref: '#/components/schemas/PartialUser'
          nullable: true # Could be null

      required:
        - CourseID
        - UserID
        - "Course name"
        - created_at
        - updated_at

    Company:
      type: object
      properties:
        CompanyID:
          type: integer
          format: int64
        UserID:
          type: integer
          format: int64
          description: User ID of the company manager.
          nullable: true # If onDelete('set null') is used on UserID
        Name:
          type: string
        Email:
          type: string
          format: email
          nullable: true
        Phone:
          type: string
          nullable: true
        Description:
          type: string
          nullable: true
        Country:
          type: string
          nullable: true
        City:
          type: string
          nullable: true
        "Detailed Address":
          type: string
          nullable: true
        Media:
          type: string # Path or JSON string of paths
          nullable: true
        "Web site":
          type: string
          nullable: true
          format: url
        status: # Added column
          type: string
          enum: [pending, approved, rejected]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user: # The manager user (sometimes included)
          $ref: '#/components/schemas/PartialUser' # Or full User? Check API.
          nullable: true

      required:
        - CompanyID
        - Name
        - status # Added column
        - created_at
        - updated_at

    Group:
      type: object
      properties:
        GroupID:
          type: integer
          format: int64
        "Telegram Hyper Link":
          type: string
          nullable: true
          format: url
      required:
        - GroupID

    JobApplication:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        UserID:
          type: integer
          format: int64
          description: User ID of the applicant.
        JobID:
          type: integer
          format: int64
          description: Job Opportunity ID applied for.
        Status:
          type: string
          nullable: true
          description: Status of the application (e.g., Pending, Reviewed, Accepted, Rejected).
        Date:
          type: string
          format: date
          description: Application date.
        Description:
          type: string
          nullable: true
          description: Applicant's notes or cover letter text.
        CV:
          type: string
          nullable: true
          description: File path or URL to the applicant's CV.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        job_opportunity: # The job that was applied for
          $ref: '#/components/schemas/PartialJobOpportunity' # Or full? Partial often used in lists
          nullable: true
      required:
        - ID
        - UserID
        - JobID
        - Date
        - created_at
        - updated_at

    PartialJobOpportunity:
       type: object
       properties:
         JobID:
           type: integer
           format: int64
         "Job Title":
           type: string
         Type:
           type: string
           enum: [وظيفة, تدريب]
       required:
         - JobID
         - "Job Title"
         - Type

    Enrollment:
      type: object
      properties:
        EnrollmentID:
          type: integer
          format: int64
        UserID:
          type: integer
          format: int64
          description: User ID of the enrollee.
        CourseID:
          type: integer
          format: int64
          description: Training Course ID enrolled in.
        Status:
          type: string
          nullable: true
          enum: [مكتمل, قيد التقدم, ملغي]
        Date:
          type: string
          format: date # Enrollment date
        "Complet Date":
          type: string
          format: date
          nullable: true
          description: Date of completion.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        training_course: # The course enrolled in
          $ref: '#/components/schemas/PartialTrainingCourse' # Or full?
          nullable: true
      required:
        - EnrollmentID
        - UserID
        - CourseID
        - Date
        - created_at
        - updated_at

    PartialTrainingCourse:
      type: object
      properties:
        CourseID:
          type: integer
          format: int64
        "Course name":
          type: string
      required:
        - CourseID
        - "Course name"


    RecommendationResponse:
      type: object
      properties:
        recommended_jobs:
          type: array
          items:
            $ref: '#/components/schemas/JobOpportunity'
        recommended_courses:
          type: array
          items:
            $ref: '#/components/schemas/TrainingCourse'
      required:
        - recommended_jobs
        - recommended_courses

    Applicant: # For Company Manager's view of applications
      allOf: # Inherit properties from JobApplication
        - $ref: '#/components/schemas/JobApplication'
        - type: object
          properties:
            user: # The applicant user details (often more than partial)
              $ref: '#/components/schemas/User' # Assuming full user with profile is loaded
      required:
        - user

    Enrollee: # For Manager/Consultant's view of enrollments
      allOf: # Inherit properties from Enrollment
        - $ref: '#/components/schemas/Enrollment'
        - type: object
          properties:
            user: # The enrollee user details (often more than partial)
              $ref: '#/components/schemas/User' # Assuming full user with profile is loaded
      required:
        - user

    # --- Generic Response Schemas ---
    PaginatedArticles:
      allOf:
        - $ref: '#/components/schemas/PaginationMetaData'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Article'

    PaginatedJobs:
      allOf:
        - $ref: '#/components/schemas/PaginationMetaData'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/JobOpportunity'

    PaginatedCourses:
      allOf:
        - $ref: '#/components/schemas/PaginationMetaData'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/TrainingCourse'

    PaginatedCompanies:
      allOf:
        - $ref: '#/components/schemas/PaginationMetaData'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Company'

    PaginatedUsers:
      allOf:
        - $ref: '#/components/schemas/PaginationMetaData'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User' # Full User object for Admin

    PaginationMetaData:
      type: object
      properties:
        current_page:
          type: integer
        first_page_url:
          type: string
          format: url
        from:
          type: integer
          nullable: true
        last_page:
          type: integer
        last_page_url:
          type: string
          format: url
        links: # Array of link objects (optional to define fully)
          type: array
          items:
            type: object # Simple link structure
            properties:
              url:
                type: string
                format: url
                nullable: true
              label:
                type: string
              active:
                type: boolean
        next_page_url:
          type: string
          format: url
          nullable: true
        path:
          type: string
          format: url
        per_page:
          type: integer
        prev_page_url:
          type: string
          format: url
          nullable: true
        to:
          type: integer
          nullable: true
        total:
          type: integer
      required:
        - current_page
        - data # Note: 'data' type is defined in the AllOf schema
        - first_page_url
        - last_page
        - last_page_url
        - links
        - path
        - per_page
        - total

    # --- Error Schemas ---
    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
          example: Unauthenticated.
    ForbiddenError:
      type: object
      properties:
        message:
          type: string
          example: This action is unauthorized. # Or a specific message from controller
    NotFoundError:
      type: object
      properties:
        message:
          type: string
          example: Not Found. # Or a specific message from controller

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: The given data was invalid.
        errors:
          type: object
          additionalProperties: # Keys are field names, values are array of error strings
            type: array
            items:
              type: string
          example:
            email:
              - The email field is required.
              - The email has already been taken.
            password:
              - The password must be at least 8 characters.
            skills:
              - The skills field is required.
    ConflictError:
      type: object
      properties:
        message:
          type: string
          example: You have already applied for this job. # Or similar conflict message

    BadRequestError:
      type: object
      properties:
        message:
          type: string
          example: This job opportunity is no longer accepting applications. # Or similar bad request message

paths:
  # --- Authentication Paths ---
  /register:
    post:
      summary: Register a new user account.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Khalid
                last_name:
                  type: string
                  example: Ali
                username:
                  type: string
                  example: khalidali_user
                email:
                  type: string
                  format: email
                  example: khalid.ali@example.com
                password:
                  type: string
                  format: password
                  example: securepassword123
                password_confirmation:
                  type: string
                  format: password
                  example: securepassword123
                phone:
                  type: string
                  nullable: true
                  example: 0501234567
                type:
                  type: string
                  enum: [خريج, خبير استشاري, مدير شركة]
                  example: خريج
              required:
                - first_name
                - last_name
                - username
                - email
                - password
                - password_confirmation
                - type
      responses:
        "201":
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                message: User registered successfully
                access_token: "sample_new_user_token_xyz123"
                token_type: Bearer
                user:
                  UserID: 10
                  first_name: Khalid
                  last_name: Ali
                  username: khalidali_user
                  email: khalid.ali@example.com
                  email_verified: 0
                  phone: "0501234567"
                  photo: null
                  status: مفعل
                  type: خريج
                  created_at: "2025-05-03T10:00:00.000000Z"
                  updated_at: "2025-05-03T10:00:00.000000Z"
                  profile:
                    ProfileID: 5
                    UserID: 10
                    University: null
                    GPA: null
                    "Personal Description": null
                    "Technical Description": null
                    "Git Hyper Link": null
                    created_at: "2025-05-03T10:00:00.000000Z"
                    updated_at: "2025-05-03T10:00:00.000000Z"
                  skills: []
                  company: null
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /login:
    post:
      summary: Authenticate user and get token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: manager@company.com
                password:
                  type: string
                  format: password
                  example: password
              required:
                - email
                - password
      responses:
        "200":
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                message: Login successful
                access_token: "sample_manager_token_xyz123"
                token_type: Bearer
                user:
                  UserID: 2
                  first_name: Company
                  last_name: Manager
                  username: companymanager
                  email: manager@company.com
                  email_verified: 1
                  phone: "222222222"
                  photo: null
                  status: مفعل
                  type: مدير شركة
                  created_at: "2025-04-29T18:23:07.000000Z"
                  updated_at: "2025-04-29T18:23:07.000000Z"
                  profile: null
                  skills: []
                  company: # Example Company data for the manager
                    CompanyID: 1
                    UserID: 2
                    Name: Tech Solutions Inc.
                    Email: contact@techsolutions.com
                    Phone: "0119998877"
                    Description: Leading IT solutions provider in KSA.
                    Country: Saudi Arabia
                    City: Riyadh
                    "Detailed Address": "123 Tech Street, Olaya"
                    Media: null
                    "Web site": "https://techsolutions.com"
                    status: approved # Assuming it's approved if they can login as manager
                    created_at: "2025-04-29T18:23:08.000000Z"
                    updated_at: "2025-05-03T07:27:44.000000Z"

        "401":
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example:
                 message: Invalid credentials
        "403":
          description: Account is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              example:
                message: Account is not active.
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /logout:
    post:
      summary: Logout user and invalidate token.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        content: {} # No request body needed
      responses:
        "200":
          description: Successfully logged out.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'


  /user:
    get:
      summary: Get current authenticated user data.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user data with profile and skills.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/User'
              example:
                UserID: 4
                first_name: Graduate
                last_name: Student
                username: graduatestudent
                email: graduate@student.com
                email_verified: 1
                phone: "444444444"
                photo: null
                status: مفعل
                type: خريج
                created_at: "2025-04-29T18:23:08.000000Z"
                updated_at: "2025-04-29T18:23:08.000000Z"
                profile:
                  ProfileID: 1
                  UserID: 4
                  University: King Saud University
                  GPA: "4.5"
                  "Personal Description": Enthusiastic computer science graduate seeking opportunities.
                  "Technical Description": Proficient in web development technologies.
                  "Git Hyper Link": https://github.com/graduatestudent
                  created_at: "2025-04-29T18:23:08.000000Z"
                  updated_at: "2025-04-29T18:23:08.000000Z"
                skills:
                  - SkillID: 1
                    Name: PHP
                    pivot:
                      UserID: 4
                      SkillID: 1
                      Stage: متقدم
                  - SkillID: 5
                    Name: React
                    pivot:
                      UserID: 4
                      SkillID: 5
                      Stage: متوسط
                  - SkillID: 10
                    Name: Project Management
                    pivot:
                      UserID: 4
                      SkillID: 10
                      Stage: مبتدئ
                company: null

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'


  # --- Public Resources Paths ---
  /articles:
    get:
      summary: List articles.
      tags:
        - Public Resources
      responses:
        "200":
          description: A list of articles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedArticles'

    post: # Admin Only based on controller logic
      summary: Create a new article (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the author (must exist).
                  example: 3 # Expert Consultant ID
                Title:
                  type: string
                  example: New Article Title by Admin
                Description:
                  type: string
                  example: Content of the new article created by an admin...
                Date:
                  type: string
                  format: date
                  example: "2025-05-03"
                Type:
                  type: string
                  nullable: true
                  example: نصائح
                "Article Photo":
                  type: string
                  nullable: true
                  example: "/path/to/photo.jpg"
              required:
                - UserID
                - Title
                - Description
                - Date
      responses:
        "201":
          description: Article created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
              example:
                ArticleID: 10
                UserID: 3
                Title: New Article Title by Admin
                Description: Content of the new article created by an admin...
                Date: "2025-05-03T00:00:00.000000Z"
                Type: نصائح
                "Article Photo": null
                created_at: "2025-05-03T10:30:00.000000Z"
                updated_at: "2025-05-03T10:30:00.000000Z"
                user: null # User might not be loaded on creation response

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'


  /articles/{article_id}:
    get:
      summary: Show a single article.
      tags:
        - Public Resources
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to retrieve.
      responses:
        "200":
          description: Article details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put: # Admin Only based on controller logic
      summary: Update an article (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: New User ID of the author (optional).
                  example: 3 # Expert Consultant ID
                Title:
                  type: string
                  example: Updated Article Title
                Description:
                  type: string
                  example: Content of the updated article...
                Date:
                  type: string
                  format: date
                  example: "2025-05-03"
                Type:
                  type: string
                  nullable: true
                  example: استشاري
                "Article Photo":
                  type: string
                  nullable: true
                  example: "/path/to/updated_photo.png"
      responses:
        "200":
          description: Article updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete: # Admin Only based on controller logic
      summary: Delete an article (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to delete.
      responses:
        "204":
          description: Article deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /jobs:
    get:
      summary: List job opportunities.
      tags:
        - Public Resources
      responses:
        "200":
          description: A list of job opportunities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobs'

    post: # Admin Only based on controller logic
      summary: Create a new job opportunity (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the company manager posting the job (must exist and be a manager?).
                  example: 2 # Company Manager ID
                "Job Title":
                  type: string
                  example: Senior Software Engineer
                "Job Description":
                  type: string
                  example: Seeking experienced software engineer...
                Qualification:
                  type: string
                  nullable: true
                  example: Bachelor's degree, 5+ years experience.
                Site:
                  type: string
                  nullable: true
                  example: Remote
                Date:
                  type: string
                  format: date
                  example: "2025-05-03"
                Skills:
                  type: string
                  nullable: true
                  example: Laravel, PHP, MySQL, API Design
                Type:
                  type: string
                  enum: [وظيفة, تدريب]
                  example: وظيفة
                "End Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-06-15"
                Status:
                  type: string
                  enum: [مفعل, معلق, محذوف]
                  example: مفعل
              required:
                - UserID
                - "Job Title"
                - "Job Description"
                - Date
                - Type
                - Status
      responses:
        "201":
          description: Job opportunity created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOpportunity'
              example:
                JobID: 20
                UserID: 2
                "Job Title": Senior Software Engineer
                "Job Description": Seeking experienced software engineer...
                Qualification: Bachelor's degree, 5+ years experience.
                Site: Remote
                Date: "2025-05-03T00:00:00.000000Z"
                Skills: Laravel, PHP, MySQL, API Design
                Type: وظيفة
                "End Date": "2025-06-15T00:00:00.000000Z"
                Status: مفعل
                created_at: "2025-05-03T10:30:00.000000Z"
                updated_at: "2025-05-03T10:30:00.000000Z"
                user: null # User might not be loaded on creation response

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'


  /jobs/{job_opportunity}:
    get:
      summary: Show a single job opportunity.
      tags:
        - Public Resources
      parameters:
        - name: job_opportunity
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to retrieve.
      responses:
        "200":
          description: Job opportunity details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOpportunity'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    # PUT and DELETE for jobs are handled in Admin and Company Manager paths


  /jobs/{job_opportunity}/apply:
    post:
      summary: Apply for a job opportunity.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      parameters:
        - name: job_opportunity
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to apply for.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  type: string
                  nullable: true
                  description: Applicant's notes or cover letter.
                  example: I am very interested in this position.
                CV:
                  type: string
                  nullable: true
                  description: File path or URL to the applicant's CV.
                  example: "/uploads/user_cv_khalid.pdf"
      responses:
        "201":
          description: Application submitted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApplication'
              example:
                ID: 101
                UserID: 4 # Current User ID
                JobID: 1 # Job ID applied for
                Status: Pending
                Date: "2025-05-03T10:30:00.000000Z"
                Description: I am very interested in this position.
                CV: "/uploads/user_cv_khalid.pdf"
                created_at: "2025-05-03T10:30:00.000000Z"
                updated_at: "2025-05-03T10:30:00.000000Z"
                job_opportunity: # Note: This might not be returned on success, check API response
                  JobID: 1
                  "Job Title": Junior Web Developer
                  Type: وظيفة
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "409":
          description: Conflict (Already applied for this job).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              example:
                message: You have already applied for this job.
        "400":
          description: Bad Request (Job not accepting applications).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              example:
                message: This job opportunity is no longer accepting applications.
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'


  /courses:
    get:
      summary: List training courses.
      tags:
        - Public Resources
      responses:
        "200":
          description: A list of training courses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCourses'

    post: # Admin Only based on controller logic
      summary: Create a new training course (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the creator (Manager, Consultant, or Admin).
                  example: 3 # Expert Consultant ID
                "Course name":
                  type: string
                  example: Advanced React Development
                "Trainers name":
                  type: string
                  nullable: true
                  example: Jane Doe
                "Course Description":
                  type: string
                  nullable: true
                  example: Deep dive into advanced React concepts...
                Site:
                  type: string
                  nullable: true
                  example: اونلاين
                "Trainers Site":
                  type: string
                  nullable: true
                  example: LearnTech Platform
                "Start Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-07-01"
                "End Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-08-01"
                "Enroll Hyper Link":
                  type: string
                  nullable: true
                  format: url
                  example: "https://learntech.com/react"
                Stage:
                  type: string
                  nullable: true
                  enum: [مبتدئ, متوسط, متقدم]
                  example: متقدم
                Certificate:
                  type: string # Or boolean
                  nullable: true
                  example: يوجد
              required:
                - UserID
                - "Course name"
      responses:
        "201":
          description: Training course created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingCourse'
              example:
                CourseID: 30
                UserID: 3
                "Course name": Advanced React Development
                "Trainers name": Jane Doe
                "Course Description": Deep dive into advanced React concepts...
                Site: اونلاين
                "Trainers Site": LearnTech Platform
                "Start Date": "2025-07-01T00:00:00.000000Z"
                "End Date": "2025-08-01T00:00:00.000000Z"
                "Enroll Hyper Link": "https://learntech.com/react"
                Stage: متقدم
                Certificate: يوجد
                created_at: "2025-05-03T10:30:00.000000Z"
                updated_at: "2025-05-03T10:30:00.000000Z"
                creator: null # User might not be loaded on creation response

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /courses/{training_course}:
    get:
      summary: Show a single training course.
      tags:
        - Public Resources
      parameters:
        - name: training_course
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to retrieve.
      responses:
        "200":
          description: Training course details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingCourse'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    # PUT and DELETE for courses are handled in Admin and Company Manager paths

  /courses/{training_course}/enroll:
    post:
      summary: Enroll in a training course.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      parameters:
        - name: training_course
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to enroll in.
      requestBody:
        content: {} # No request body needed
      responses:
        "201":
          description: Enrolled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
              example:
                EnrollmentID: 201
                UserID: 4 # Current User ID (Graduate)
                CourseID: 1 # Course ID enrolled in
                Status: قيد التقدم
                Date: "2025-05-03T10:30:00.000000Z"
                "Complet Date": null
                created_at: "2025-05-03T10:30:00.000000Z"
                updated_at: "2025-05-03T10:30:00.000000Z"
                training_course: # Note: This might not be returned on success, check API response
                  CourseID: 1
                  "Course name": Introduction to Laravel 11
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "409":
          description: Conflict (Already enrolled).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              example:
                message: You are already enrolled in this course.

  /companies:
    get:
      summary: List companies.
      tags:
        - Public Resources
      responses:
        "200":
          description: A list of companies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompanies'

    post: # Admin Only based on controller logic
      summary: Create a new company (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the company manager (must exist and be a manager?).
                  example: 2 # Company Manager ID
                Name:
                  type: string
                  example: Global Innovations Ltd.
                Email:
                  type: string
                  format: email
                  nullable: true
                  example: info@globalinnovations.com
                Phone:
                  type: string
                  nullable: true
                  example: "0115551122"
                Description:
                  type: string
                  nullable: true
                  example: A global leader in technology and consulting.
                Country:
                  type: string
                  nullable: true
                  example: UAE
                City:
                  type: string
                  nullable: true
                  example: Dubai
                "Detailed Address":
                  type: string
                  nullable: true
                  example: Sheikh Zayed Road, Business Bay
                Media:
                  type: string
                  nullable: true
                  example: "/media/global_innovations_logo.png"
                "Web site":
                  type: string
                  nullable: true
                  format: url
                  example: "https://globalinnovations.com"
                status:
                  type: string
                  enum: [pending, approved, rejected]
                  example: approved # Admin can set initial status
              required:
                - UserID
                - Name
                - status
      responses:
        "201":
          description: Company created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              example:
                CompanyID: 10
                UserID: 2
                Name: Global Innovations Ltd.
                Email: info@globalinnovations.com
                Phone: "0115551122"
                Description: A global leader in technology and consulting.
                Country: UAE
                City: Dubai
                "Detailed Address": Sheikh Zayed Road, Business Bay
                Media: null
                "Web site": https://globalinnovations.com
                status: approved
                created_at: "2025-05-03T10:30:00.000000Z"
                updated_at: "2025-05-03T10:30:00.000000Z"
                user: null # User might not be loaded on creation response

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /companies/{company_id}:
    get:
      summary: Show a single company.
      tags:
        - Public Resources
      parameters:
        - name: company_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the company to retrieve.
      responses:
        "200":
          description: Company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        "404":
          description: Company not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    # PUT and DELETE for companies are handled in Admin paths

  /skills:
    get:
      summary: List skills (searchable).
      tags:
        - Public Resources
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Optional search term to filter skills by name.
      responses:
        "200":
          description: A list of skills.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
              example:
                - SkillID: 1
                  Name: PHP
                - SkillID: 2
                  Name: Laravel
                - SkillID: 3
                  Name: JavaScript
                - SkillID: 4
                  Name: Vue.js


    # POST, PUT, DELETE for skills are handled in Admin paths

  # --- Authenticated User Paths (General) ---

  /profile:
    get:
      summary: Show the authenticated user's profile.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: The user's profile details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

    put:
      summary: Update the authenticated user's profile.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                University:
                  type: string
                  nullable: true
                  example: King Fahd University of Petroleum and Minerals
                GPA:
                  type: string
                  nullable: true
                  example: "4.9"
                "Personal Description":
                  type: string
                  nullable: true
                  example: Highly motivated computer engineer.
                "Technical Description":
                  type: string
                  nullable: true
                  example: Full-stack web development expert.
                "Git Hyper Link":
                  type: string
                  nullable: true
                  format: url
                  example: https://github.com/myprofile
              # No required fields needed for update (send only what you want to change)
      responses:
        "200":
          description: Profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
              example:
                ProfileID: 1
                UserID: 4
                University: King Fahd University of Petroleum and Minerals
                GPA: "4.9"
                "Personal Description": Highly motivated computer engineer.
                "Technical Description": Full-stack web development expert.
                "Git Hyper Link": https://github.com/myprofile
                created_at: "2025-04-29T18:23:08.000000Z"
                updated_at: "2025-05-03T11:00:00.000000Z"

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /profile/skills:
    post: # Used for sync, potentially PUT/PATCH is more appropriate
      summary: Update/Sync authenticated user's skills.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skills:
                  type: array # Simple array of skill IDs
                  items:
                    type: integer
                    format: int64
                  description: Array of skill IDs the user possesses. Existing skills not in this list will be removed.
                  example: [1, 5, 10] # PHP, React, Project Management
              required:
                - skills
      responses:
        "200":
          description: User skills updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' # Often returns the user object with updated skills
              example:
                UserID: 4
                first_name: Graduate
                last_name: Student
                username: graduatestudent
                email: graduate@student.com
                # ... other user fields
                skills:
                  - SkillID: 1
                    Name: PHP
                    pivot:
                      UserID: 4
                      SkillID: 1
                      Stage: متقدم # Example stage from Seeder
                  - SkillID: 5
                    Name: React
                    pivot:
                      UserID: 4
                      SkillID: 5
                      Stage: متوسط # Example stage
                  - SkillID: 10
                    Name: Project Management
                    pivot:
                      UserID: 4
                      SkillID: 10
                      Stage: مبتدئ # Example stage
                profile: { ... } # Profile might be included
                company: null

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /my-applications:
    get:
      summary: List authenticated user's job applications.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of the user's job applications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobApplication'
              example:
                - ID: 1
                  UserID: 4
                  JobID: 1
                  Status: Reviewed
                  Date: "2025-04-25T00:00:00.000000Z"
                  Description: Applied via seeder.
                  CV: "/path/to/default_cv.pdf"
                  created_at: "2025-04-29T18:23:09.000000Z"
                  updated_at: "2025-04-29T18:23:09.000000Z"
                  job_opportunity:
                    JobID: 1
                    "Job Title": Junior Web Developer
                    Type: وظيفة
                - ID: 2
                  UserID: 4
                  JobID: 2
                  Status: Rejected
                  Date: "2025-04-27T00:00:00.000000Z"
                  Description: Applied via seeder.
                  CV: "/path/to/default_cv.pdf"
                  created_at: "2025-04-29T18:23:09.000000Z"
                  updated_at: "2025-04-29T18:23:09.000000Z"
                  job_opportunity:
                    JobID: 2
                    "Job Title": Flutter Development Internship
                    Type: تدريب
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /my-applications/{job_application}:
    delete:
      summary: Delete an authenticated user's job application (Withdraw).
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      parameters:
        - name: job_application
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job application to delete.
      responses:
        "204":
          description: Application deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (Cannot delete this application or it doesn't belong to the user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /my-enrollments:
    get:
      summary: List authenticated user's course enrollments.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of the user's course enrollments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enrollment'
              example:
                - EnrollmentID: 1
                  UserID: 4
                  CourseID: 1
                  Status: ملغي
                  Date: "2025-04-05T00:00:00.000000Z"
                  "Complet Date": null
                  created_at: "2025-04-29T18:23:09.000000Z"
                  updated_at: "2025-04-29T18:23:09.000000Z"
                  training_course:
                    CourseID: 1
                    "Course name": Introduction to Laravel 11
                - EnrollmentID: 2
                  UserID: 4
                  CourseID: 2
                  Status: مكتمل
                  Date: "2025-03-04T00:00:00.000000Z"
                  "Complet Date": "2025-04-12T00:00:00.000000Z"
                  created_at: "2025-04-29T18:23:09.000000Z"
                  updated_at: "2025-04-29T18:23:09.000000Z"
                  training_course:
                    CourseID: 2
                    "Course name": Advanced Git Techniques
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /my-enrollments/{enrollment}:
    delete:
      summary: Delete an authenticated user's course enrollment (Unenroll).
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      parameters:
        - name: enrollment
          in: path
          required: true
          schema:
            type: integer
          description: ID of the enrollment to delete.
      responses:
        "204":
          description: Enrollment deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (Cannot delete this enrollment or it doesn't belong to the user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Enrollment not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /recommendations:
    get:
      summary: Get recommendations for the authenticated user.
      tags:
        - Authenticated User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Recommended jobs and courses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationResponse'
              example:
                recommended_jobs:
                  - JobID: 1
                    UserID: 2
                    "Job Title": Junior Web Developer
                    "Job Description": Seeking a motivated junior developer...
                    Qualification: Bachelor's degree in CS...
                    Site: Riyadh (On-site)
                    Date: "2025-04-22T00:00:00.000000Z"
                    Skills: PHP, Laravel, JavaScript...
                    Type: وظيفة
                    "End Date": "2025-05-29T00:00:00.000000Z"
                    Status: مفعل
                    created_at: "2025-04-29T18:23:08.000000Z"
                    updated_at: "2025-04-29T18:23:08.000000Z"
                    user:
                       UserID: 2
                       first_name: Company
                       last_name: Manager
                  # ... potentially more recommended jobs
                recommended_courses:
                  - CourseID: 1
                    UserID: 2
                    "Course name": Introduction to Laravel 11
                    "Trainers name": Dr. Expert Consultant
                    "Course Description": A comprehensive introduction...
                    Site: اونلاين
                    "Trainers Site": Expert Consulting Platform
                    "Start Date": "2025-05-09T00:00:00.000000Z"
                    "End Date": "2025-06-08T00:00:00.000000Z"
                    "Enroll Hyper Link": https://enroll.expert.com/laravel11
                    Stage: مبتدئ
                    Certificate: يوجد
                    created_at: "2025-04-29T18:23:09.000000Z"
                    updated_at: "2025-04-29T18:23:09.000000Z"
                    creator:
                      UserID: 2
                      first_name: Company
                      last_name: Manager
                  # ... potentially more recommended courses

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  # --- Company Manager Paths ---
  /company-manager/company:
    get:
      summary: Show the authenticated company manager's company.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Company details for the authenticated manager.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              example:
                CompanyID: 1
                UserID: 2
                Name: Tech Solutions Inc.
                Email: contact@techsolutions.com
                Phone: "0119998877" # Corrected from inconsistent Seeder example
                Description: Leading IT solutions provider in KSA. # Corrected
                Country: Saudi Arabia
                City: Riyadh
                "Detailed Address": 123 Tech Street, Olaya
                Media: null
                "Web site": https://techsolutions.com
                status: approved # Should be approved to access as manager?
                created_at: "2025-04-29T18:23:08.000000Z"
                updated_at: "2025-05-03T07:27:44.000000Z"

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Not Found (No company associated with this manager).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              example:
                message: No company associated with this manager.

    put:
      summary: Update the authenticated company manager's company.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: Tech Solutions KSA
                Email:
                  type: string
                  format: email
                  nullable: true
                  example: newcontact@techsolutions.com
                Phone:
                  type: string
                  nullable: true
                  example: "0505554433"
                Description:
                  type: string
                  nullable: true
                  example: Updated description for Tech Solutions.
                Country:
                  type: string
                  nullable: true
                  example: Saudi Arabia
                City:
                  type: string
                  nullable: true
                  example: Jeddah
                "Detailed Address":
                  type: string
                  nullable: true
                  example: King Abdulaziz Street
                Media:
                  type: string
                  nullable: true
                  example: "/media/updated_logo.png"
                "Web site":
                  type: string
                  nullable: true
                  format: url
                  example: "https://new.techsolutions.com"
      responses:
        "200":
          description: Company updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              example:
                 CompanyID: 1
                 UserID: 2
                 Name: Tech Solutions KSA # Updated
                 Email: newcontact@techsolutions.com # Updated
                 Phone: "0505554433" # Updated
                 Description: Updated description for Tech Solutions. # Updated
                 Country: Saudi Arabia
                 City: Jeddah # Updated
                 "Detailed Address": King Abdulaziz Street # Updated
                 Media: /media/updated_logo.png # Updated
                 "Web site": https://new.techsolutions.com # Updated
                 status: approved
                 created_at: "2025-04-29T18:23:08.000000Z"
                 updated_at: "2025-05-03T11:10:00.000000Z" # Updated timestamp

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Not Found (No company associated with this manager).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /company-manager/jobs: # Manage Job Opportunities
    get:
      summary: List job opportunities posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of job opportunities posted by the manager.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobs' # Filtered by manager's UserID

    post:
      summary: Create a new job opportunity.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "Job Title":
                  type: string
                  example: Full-stack Web Developer
                "Job Description":
                  type: string
                  example: Exciting opportunity for a full-stack developer...
                Qualification:
                  type: string
                  nullable: true
                  example: Bachelor's degree, 3+ years experience.
                Site:
                  type: string
                  nullable: true
                  example: Hybrid (Riyadh)
                Date:
                  type: string
                  format: date
                  example: "2025-05-03"
                Skills:
                  type: string
                  nullable: true
                  example: Laravel, Vue.js, MySQL, API Design
                Type:
                  type: string
                  enum: [وظيفة, تدريب]
                  example: وظيفة
                "End Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-06-30"
                Status:
                  type: string
                  enum: [مفعل, معلق, محذوف]
                  example: مفعل
              required:
                - "Job Title"
                - "Job Description"
                - Date
                - Type
                - Status
      responses:
        "201":
          description: Job opportunity created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOpportunity'
              example:
                JobID: 21 # New ID
                UserID: 2 # Authenticated Manager's ID
                "Job Title": Full-stack Web Developer
                "Job Description": Exciting opportunity...
                Qualification: Bachelor's degree, 3+ years experience.
                Site: Hybrid (Riyadh)
                Date: "2025-05-03T00:00:00.000000Z"
                Skills: Laravel, Vue.js, MySQL, API Design
                Type: وظيفة
                "End Date": "2025-06-30T00:00:00.000000Z"
                Status: مفعل
                created_at: "2025-05-03T11:15:00.000000Z"
                updated_at: "2025-05-03T11:15:00.000000Z"
                user: null

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'


  /company-manager/jobs/{job_id}:
    get:
      summary: Show a specific job opportunity posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to retrieve.
      responses:
        "200":
          description: Job opportunity details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOpportunity'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager or job doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific job opportunity posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "Job Title":
                  type: string
                  example: Full-stack Web Developer (Mid-level)
                Status:
                  type: string
                  enum: [مفعل, معلق, محذوف]
                  example: معلق # Manager can change status
              # Include other updatable job fields as needed
      responses:
        "200":
          description: Job opportunity updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOpportunity'
              example:
                JobID: 21
                UserID: 2
                "Job Title": Full-stack Web Developer (Mid-level) # Updated
                "Job Description": Exciting opportunity...
                Qualification: Bachelor's degree, 3+ years experience.
                Site: Hybrid (Riyadh)
                Date: "2025-05-03T00:00:00.000000Z"
                Skills: Laravel, Vue.js, MySQL, API Design
                Type: وظيفة
                "End Date": "2025-06-30T00:00:00.000000Z"
                Status: معلق # Updated
                created_at: "2025-05-03T11:15:00.000000Z"
                updated_at: "2025-05-03T11:20:00.000000Z" # Updated timestamp
                user: null

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager or job doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific job opportunity posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to delete.
      responses:
        "204":
          description: Job opportunity deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager or job doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  /company-manager/courses: # Manage Training Courses
    get:
      summary: List training courses posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of training courses posted by the manager.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCourses' # Filtered by manager's UserID

    post:
      summary: Create a new training course.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "Course name":
                  type: string
                  example: Introduction to APIs with Laravel
                "Trainers name":
                  type: string
                  nullable: true
                  example: Ahmed Abdullah
                "Course Description":
                  type: string
                  nullable: true
                  example: Learn to build RESTful APIs using Laravel...
                Site:
                  type: string
                  nullable: true
                  example: اونلاين
                "Trainers Site":
                  type: string
                  nullable: true
                  example: Company Training Portal
                "Start Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-06-10"
                "End Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-07-10"
                "Enroll Hyper Link":
                  type: string
                  nullable: true
                  format: url
                  example: "https://company.com/enroll/api-course"
                Stage:
                  type: string
                  nullable: true
                  enum: [مبتدئ, متوسط, متقدم]
                  example: متوسط
                Certificate:
                  type: string # Or boolean
                  nullable: true
                  example: يوجد
              required:
                - "Course name"
      responses:
        "201":
          description: Training course created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingCourse'
              example:
                CourseID: 31 # New ID
                UserID: 2 # Authenticated Manager's ID
                "Course name": Introduction to APIs with Laravel
                "Trainers name": Ahmed Abdullah
                "Course Description": Learn to build RESTful APIs...
                Site: اونلاين
                "Trainers Site": Company Training Portal
                "Start Date": "2025-06-10T00:00:00.000000Z"
                "End Date": "2025-07-10T00:00:00.000000Z"
                "Enroll Hyper Link": https://company.com/enroll/api-course
                Stage: متوسط
                Certificate: يوجد
                created_at: "2025-05-03T11:25:00.000000Z"
                updated_at: "2025-05-03T11:25:00.000000Z"
                creator: null

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /company-manager/courses/{training_course}:
    get:
      summary: Show a specific training course posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      parameters:
        - name: training_course
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to retrieve.
      responses:
        "200":
          description: Training course details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingCourse'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager or course doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific training course posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      parameters:
        - name: training_course
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "Trainers name":
                  type: string
                  nullable: true
                  example: Ahmed Abdullah (Updated)
                Stage:
                  type: string
                  nullable: true
                  enum: [مبتدئ, متوسط, متقدم]
                  example: متقدم
              # Include other updatable course fields as needed
      responses:
        "200":
          description: Training course updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingCourse'
              example:
                 CourseID: 31
                 UserID: 2
                 "Course name": Introduction to APIs with Laravel
                 "Trainers name": Ahmed Abdullah (Updated) # Updated
                 "Course Description": Learn to build RESTful APIs...
                 Site: اونلاين
                 "Trainers Site": Company Training Portal
                 "Start Date": "2025-06-10T00:00:00.000000Z"
                 "End Date": "2025-07-10T00:00:00.000000Z"
                 "Enroll Hyper Link": https://company.com/enroll/api-course
                 Stage: متقدم # Updated
                 Certificate: يوجد
                 created_at: "2025-05-03T11:25:00.000000Z"
                 updated_at: "2025-05-03T11:30:00.000000Z" # Updated timestamp
                 creator: null

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager or course doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific training course posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      parameters:
        - name: training_course
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to delete.
      responses:
        "204":
          description: Training course deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager or course doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /company-manager/jobs/{job_opportunity}/applicants:
    get:
      summary: List applicants for a job opportunity posted by the authenticated company manager.
      tags:
        - Company Manager
      security:
        - bearerAuth: []
      parameters:
        - name: job_opportunity
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to retrieve applicants for.
      responses:
        "200":
          description: A list of applicants for the specified job.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'
              example:
                - ID: 1 # Application ID
                  UserID: 4 # Applicant User ID
                  JobID: 1 # Job ID
                  Status: Reviewed
                  Date: "2025-04-25T00:00:00.000000Z"
                  Description: Applied via seeder.
                  CV: "/path/to/default_cv.pdf"
                  created_at: "2025-04-29T18:23:09.000000Z"
                  updated_at: "2025-04-29T18:23:09.000000Z"
                  user:
                     UserID: 4
                     first_name: Graduate
                     last_name: Student
                     username: graduatestudent
                     email: graduate@student.com
                     email_verified: 1
                     phone: "444444444"
                     photo: null
                     status: مفعل
                     type: خريج
                     created_at: "2025-04-29T18:23:08.000000Z"
                     updated_at: "2025-04-29T18:23:08.000000Z"
                     profile:
                       ProfileID: 1
                       UserID: 4
                       University: MIT # Example update
                       GPA: "4.5"
                       "Personal Description": Highly motivated individual seeking challenges. # Example update
                       "Technical Description": Proficient in web development technologies.
                       "Git Hyper Link": https://github.com/graduatestudent
                       created_at: "2025-04-29T18:23:08.000000Z"
                       updated_at: "2025-05-02T15:30:04.000000Z" # Updated timestamp
                     skills: [] # Skills might not be loaded by default here
                     company: null
                # ... more applicants for this job
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Company Manager or job doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /company-manager/courses/{training_course}/enrollees:
    get:
      summary: List enrollees for a training course posted by the authenticated manager or consultant.
      tags:
        - Company Manager
        - Consultant # As per the doc
      security:
        - bearerAuth: []
      parameters:
        - name: training_course
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to retrieve enrollees for.
      responses:
        "200":
          description: A list of enrollees for the specified course.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enrollee'
              example:
                - EnrollmentID: 3
                  UserID: 4 # Enrollee User ID
                  CourseID: 1 # Course ID
                  Status: قيد التقدم
                  Date: "2025-05-03T10:30:00.000000Z" # Enrollment date
                  "Complet Date": null
                  created_at: "2025-05-03T10:30:00.000000Z"
                  updated_at: "2025-05-03T10:30:00.000000Z"
                  user:
                    UserID: 4
                    first_name: Graduate
                    last_name: Student
                    username: graduatestudent
                    email: graduate@student.com
                    email_verified: 1
                    phone: "444444444"
                    photo: null
                    status: مفعل
                    type: خريج
                    created_at: "2025-04-29T18:23:08.000000Z"
                    updated_at: "2025-04-29T18:23:08.000000Z"
                    profile:
                      ProfileID: 1
                      UserID: 4
                      University: MIT # Example update
                      GPA: "4.5"
                      "Personal Description": Highly motivated individual seeking challenges. # Example update
                      "Technical Description": Proficient in web development technologies.
                      "Git Hyper Link": https://github.com/graduatestudent
                      created_at: "2025-04-29T18:23:08.000000Z"
                      updated_at: "2025-05-02T15:30:04.000000Z" # Updated timestamp
                    skills: [] # Skills might not be loaded by default here
                    company: null
                # ... more enrollees for this course
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Manager/Consultant or course doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  # --- Consultant Paths ---
  /consultant/articles:
    get:
      summary: List articles posted by the authenticated consultant.
      tags:
        - Consultant
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of articles posted by the consultant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedArticles' # Filtered by consultant's UserID

    post:
      summary: Create a new article.
      tags:
        - Consultant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Title:
                  type: string
                  example: Tips for Technical Interviews
                Description:
                  type: string
                  example: How to prepare and shine in technical interviews...
                Date:
                  type: string
                  format: date
                  example: "2025-05-03" # Publish date
                Type:
                  type: string
                  nullable: true
                  example: نصائح # Category/Type
                "Article Photo":
                  type: string
                  nullable: true
                  example: null # Optional path to photo
              required:
                - Title
                - Description
                - Date
      responses:
        "201":
          description: Article created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
              example:
                ArticleID: 11 # New ID
                UserID: 3 # Authenticated Consultant's ID
                Title: Tips for Technical Interviews
                Description: How to prepare and shine...
                Date: "2025-05-03T00:00:00.000000Z"
                Type: نصائح
                "Article Photo": null
                created_at: "2025-05-03T11:40:00.000000Z"
                updated_at: "2025-05-03T11:40:00.000000Z"
                user: null # User might not be loaded on creation response

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Consultant).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /consultant/articles/{article_id}:
    get:
      summary: Show a specific article posted by the authenticated consultant.
      tags:
        - Consultant
      security:
        - bearerAuth: []
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to retrieve.
      responses:
        "200":
          description: Article details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Consultant or article doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific article posted by the authenticated consultant.
      tags:
        - Consultant
      security:
        - bearerAuth: []
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Title:
                  type: string
                  example: Tips for Technical Interviews (Updated)
                Description:
                  type: string
                  example: Updated content for the interview tips...
                Date:
                  type: string
                  format: date
                  example: "2025-05-03"
                Type:
                  type: string
                  nullable: true
                  example: نصائح
                "Article Photo":
                  type: string
                  nullable: true
                  example: "/path/to/updated_photo.jpg"
              # Include other updatable article fields as needed
      responses:
        "200":
          description: Article updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
              example:
                ArticleID: 11
                UserID: 3
                Title: Tips for Technical Interviews (Updated) # Updated
                Description: Updated content for the interview tips... # Updated
                Date: "2025-05-03T00:00:00.000000Z"
                Type: نصائح
                "Article Photo": null
                created_at: "2025-05-03T11:40:00.000000Z"
                updated_at: "2025-05-03T11:45:00.000000Z" # Updated timestamp
                user: null
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Consultant or article doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific article posted by the authenticated consultant.
      tags:
        - Consultant
      security:
        - bearerAuth: []
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to delete.
      responses:
        "204":
          description: Article deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not a Consultant or article doesn't belong to user).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  # --- Admin Paths ---
  /admin/users:
    get:
      summary: List all users (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers' # Full User object in data array

    post:
      summary: Create a new user (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Admin
                last_name:
                  type: string
                  example: New
                username:
                  type: string
                  example: new_admin
                email:
                  type: string
                  format: email
                  example: new.admin@example.com
                password:
                  type: string
                  format: password
                  example: secure_admin_pass
                phone:
                  type: string
                  nullable: true
                  example: "0511111111"
                type:
                  type: string
                  enum: [خريج, خبير استشاري, مدير شركة, Admin]
                  example: Admin
                status:
                  type: string
                  enum: [مفعل, معلق, محذوف]
                  example: مفعل
                email_verified:
                  type: boolean
                  example: true
              required:
                - first_name
                - last_name
                - username
                - email
                - password
                - type
                - status
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' # Returns the full created user object
              example:
                UserID: 10
                first_name: Admin
                last_name: New
                username: new_admin
                email: new.admin@example.com
                email_verified: 1
                phone: "0511111111"
                photo: null
                status: مفعل
                type: Admin
                created_at: "2025-05-03T11:50:00.000000Z"
                updated_at: "2025-05-03T11:50:00.000000Z"
                profile: null
                skills: []
                company: null

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /admin/users/{user_id}:
    get:
      summary: Show a specific user (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve.
      responses:
        "200":
          description: User details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' # Returns the full user object with relations
              example:
                UserID: 4
                first_name: Graduate
                last_name: Student
                username: graduatestudent
                email: graduate@student.com
                email_verified: 1
                phone: "444444444"
                photo: null
                status: مفعل
                type: خريج
                created_at: "2025-04-29T18:23:08.000000Z"
                updated_at: "2025-04-29T18:23:08.000000Z"
                profile:
                  ProfileID: 1
                  UserID: 4
                  University: MIT # Example update
                  GPA: "4.5"
                  "Personal Description": Highly motivated individual seeking challenges. # Example update
                  "Technical Description": Proficient in web development technologies.
                  "Git Hyper Link": https://github.com/graduatestudent
                  created_at: "2025-04-29T18:23:08.000000Z"
                  updated_at: "2025-05-02T15:30:04.000000Z" # Updated timestamp
                skills:
                  - SkillID: 1
                    Name: PHP
                    pivot:
                      UserID: 4
                      SkillID: 1
                      Stage: متقدم
                  - SkillID: 5
                    Name: React
                    pivot:
                      UserID: 4
                      SkillID: 5
                      Stage: متوسط
                  - SkillID: 10
                    Name: Project Management
                    pivot:
                      UserID: 4
                      SkillID: 10
                      Stage: مبتدئ
                company: null
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific user (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Company8 # Example renaming
                last_name:
                  type: string
                  example: Manager8 # Example renaming
                username:
                  type: string
                  example: newmanager_user
                email:
                  type: string
                  format: email
                  example: new.manager@company.com
                password:
                  type: string
                  format: password
                  nullable: true
                  example: new_secure_pass
                phone:
                  type: string
                  nullable: true
                  example: "0522222222"
                type:
                  type: string
                  enum: [خريج, خبير استشاري, مدير شركة, Admin]
                  example: مدير شركة
                status:
                  type: string
                  enum: [مفعل, معلق, محذوف]
                  example: معلق
                email_verified:
                  type: boolean
                  example: false
              # No fields required for update (send only what you want to change)
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                UserID: 2
                first_name: Company8 # Updated
                last_name: Manager8 # Updated
                username: newmanager_user # Updated
                email: new.manager@company.com # Updated
                email_verified: 0 # Updated
                phone: "0522222222" # Updated
                photo: null
                status: معلق # Updated
                type: مدير شركة # Updated
                created_at: "2025-04-29T18:23:07.000000Z"
                updated_at: "2025-05-03T11:55:00.000000Z" # Updated timestamp
                profile: null
                skills: []
                company: # Assuming company is loaded
                  CompanyID: 1
                  UserID: 2
                  Name: Tech Solutions Inc. # Example value
                  # ... etc.
                  status: approved
                  created_at: "2025-04-29T18:23:08.000000Z"
                  updated_at: "2025-05-03T07:27:44.000000Z"


        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific user (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to delete.
      responses:
        "204":
          description: User deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin or trying to delete self).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  /admin/skills:
    get:
      summary: List all skills (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all skills.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
              example:
                - SkillID: 1
                  Name: PHP
                - SkillID: 2
                  Name: Laravel
                - SkillID: 3
                  Name: JavaScript
                - SkillID: 4
                  Name: Vue.js

    post:
      summary: Create a new skill (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: Kubernetes
              required:
                - Name
      responses:
        "201":
          description: Skill created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
              example:
                SkillID: 15
                Name: Kubernetes

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'


  /admin/skills/{skill_id}:
    get:
      summary: Show a specific skill (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: skill_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the skill to retrieve.
      responses:
        "200":
          description: Skill details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Skill not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific skill (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: skill_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the skill to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: Docker & Kubernetes # Updated name
              required:
                - Name
      responses:
        "200":
          description: Skill updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
              example:
                SkillID: 15
                Name: Docker & Kubernetes

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Skill not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific skill (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: skill_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the skill to delete.
      responses:
        "204":
          description: Skill deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Skill not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  /admin/groups:
    get:
      summary: List all groups (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
              example:
                - GroupID: 1
                  "Telegram Hyper Link": https://t.me/laravel_developers_ksa
                - GroupID: 2
                  "Telegram Hyper Link": https://t.me/flutter_devs_middle_east
                - GroupID: 3
                  "Telegram Hyper Link": https://t.me/job_opportunities_tech

    post:
      summary: Create a new group (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "Telegram Hyper Link":
                  type: string
                  format: url
                  nullable: true
                  example: https://t.me/new_tech_group
              required:
                - "Telegram Hyper Link"
      responses:
        "201":
          description: Group created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
              example:
                GroupID: 10
                "Telegram Hyper Link": https://t.me/new_tech_group

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'


  /admin/groups/{group_id}:
    get:
      summary: Show a specific group (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the group to retrieve.
      responses:
        "200":
          description: Group details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Group not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific group (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the group to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "Telegram Hyper Link":
                  type: string
                  format: url
                  nullable: true
                  example: https://t.me/updated_tech_group_link
              required:
                - "Telegram Hyper Link"
      responses:
        "200":
          description: Group updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
              example:
                GroupID: 10
                "Telegram Hyper Link": https://t.me/updated_tech_group_link

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Group not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific group (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the group to delete.
      responses:
        "204":
          description: Group deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Group not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  /admin/companies:
    get:
      summary: List all companies (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all companies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompanies'

    post:
      summary: Create a new company profile (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the company manager (must exist and be a manager?).
                  example: 2
                Name:
                  type: string
                  example: New Admin Created Company
                Email:
                  type: string
                  format: email
                  nullable: true
                  example: admincreated@company.com
                Phone:
                  type: string
                  nullable: true
                  example: "0112345678"
                Description:
                  type: string
                  nullable: true
                  example: Company created by admin.
                Country:
                  type: string
                  nullable: true
                  example: Saudi Arabia
                City:
                  type: string
                  nullable: true
                  example: Riyadh
                "Detailed Address":
                  type: string
                  nullable: true
                  example: Admin Street
                Media:
                  type: string
                  nullable: true
                  example: "/media/admin_logo.png"
                "Web site":
                  type: string
                  nullable: true
                  format: url
                  example: "https://admincreated.com"
                status:
                  type: string
                  enum: [pending, approved, rejected]
                  example: approved
              required:
                - UserID
                - Name
                - status
      responses:
        "201":
          description: Company created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              example:
                CompanyID: 11
                UserID: 2
                Name: New Admin Created Company
                Email: admincreated@company.com
                Phone: "0112345678"
                Description: Company created by admin.
                Country: Saudi Arabia
                City: Riyadh
                "Detailed Address": Admin Street
                Media: null
                "Web site": https://admincreated.com
                status: approved
                created_at: "2025-05-03T12:00:00.000000Z"
                updated_at: "2025-05-03T12:00:00.000000Z"
                user: null

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'


  /admin/companies/{company_id}:
    get:
      summary: Show a specific company (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: company_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the company to retrieve.
      responses:
        "200":
          description: Company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Company not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific company (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: company_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the company to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the company manager (optional, can reassign).
                  example: 5 # Another manager ID
                Name:
                  type: string
                  example: Updated Company Name
                status:
                  type: string
                  enum: [pending, approved, rejected]
                  example: approved # Admin can change status
                # Include other updatable company fields
      responses:
        "200":
          description: Company updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              example:
                 CompanyID: 11
                 UserID: 5 # Updated
                 Name: Updated Company Name # Updated
                 Email: admincreated@company.com
                 Phone: "0112345678"
                 Description: Company created by admin.
                 Country: Saudi Arabia
                 City: Riyadh
                 "Detailed Address": Admin Street
                 Media: null
                 "Web site": https://admincreated.com
                 status: approved # Updated
                 created_at: "2025-05-03T12:00:00.000000Z"
                 updated_at: "2025-05-03T12:05:00.000000Z" # Updated timestamp

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Company not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific company (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: company_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the company to delete.
      responses:
        "204":
          description: Company deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Company not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  /admin/articles:
    get:
      summary: List all articles (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all articles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedArticles'

    post:
      summary: Create a new article (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the author (must exist).
                  example: 3
                Title:
                  type: string
                  example: Admin Created Article
                Description:
                  type: string
                  example: This article was created by the admin...
                Date:
                  type: string
                  format: date
                  example: "2025-05-03"
                Type:
                  type: string
                  nullable: true
                  example: استشاري
                "Article Photo":
                  type: string
                  nullable: true
                  example: "/path/to/admin_photo.jpg"
              required:
                - UserID
                - Title
                - Description
                - Date
      responses:
        "201":
          description: Article created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /admin/articles/{article_id}: # Admin - Single Article
    get:
      summary: Show a specific article (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to retrieve.
      responses:
        "200":
          description: Article details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific article (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the author (optional, can reassign).
                  example: 5 # Another user ID
                Title:
                  type: string
                  example: Updated Admin Article Title
                Description:
                  type: string
                  example: Updated content for the admin article...
                Date:
                  type: string
                  format: date
                  example: "2025-05-03"
                Type:
                  type: string
                  nullable: true
                  example: نصائح
                "Article Photo":
                  type: string
                  nullable: true
                  example: "/path/to/updated_admin_photo.jpg"
              # Include other updatable article fields
      responses:
        "200":
          description: Article updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific article (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the article to delete.
      responses:
        "204":
          description: Article deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /admin/jobs: # Admin - All Jobs
    get:
      summary: List all job opportunities (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all job opportunities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobs'

    post:
      summary: Create a new job opportunity (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the company manager posting the job (must exist and be a manager?).
                  example: 2
                "Job Title":
                  type: string
                  example: Admin Created Job
                "Job Description":
                  type: string
                  example: This job was created by the admin...
                Qualification:
                  type: string
                  nullable: true
                  example: Any relevant degree.
                Site:
                  type: string
                  nullable: true
                  example: Remote
                Date:
                  type: string
                  format: date
                  example: "2025-05-03"
                Skills:
                  type: string
                  nullable: true
                  example: Flexible skills
                Type:
                  type: string
                  enum: [وظيفة, تدريب]
                  example: تدريب
                "End Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-06-30"
                Status:
                  type: string
                  enum: [مفعل, معلق, محذوف]
                  example: مفعل
              required:
                - UserID
                - "Job Title"
                - "Job Description"
                - Date
                - Type
                - Status
      responses:
        "201":
          description: Job opportunity created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOpportunity'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /admin/jobs/{job_id}: # Admin - Single Job
    get:
      summary: Show a specific job opportunity (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to retrieve.
      responses:
        "200":
          description: Job opportunity details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOpportunity'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific job opportunity (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the company manager posting the job (optional, can reassign).
                  example: 5 # Another manager ID
                "Job Title":
                  type: string
                  example: Updated Admin Job Title
                Status:
                  type: string
                  enum: [مفعل, معلق, محذوف]
                  example: معلق
              # Include other updatable job fields
      responses:
        "200":
          description: Job opportunity updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOpportunity'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific job opportunity (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the job opportunity to delete.
      responses:
        "204":
          description: Job opportunity deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Job opportunity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  /admin/courses:
    get:
      summary: List all training courses (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all training courses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCourses'

    post:
      summary: Create a new training course (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the creator (Manager, Consultant, or Admin).
                  example: 3
                "Course name":
                  type: string
                  example: Admin Created Course
                "Trainers name":
                  type: string
                  nullable: true
                  example: Admin
                "Course Description":
                  type: string
                  nullable: true
                  example: This course was created by the admin...
                Site:
                  type: string
                  nullable: true
                  example: اونلاين
                "Trainers Site":
                  type: string
                  nullable: true
                  example: Admin Platform
                "Start Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-07-01"
                "End Date":
                  type: string
                  format: date
                  nullable: true
                  example: "2025-08-01"
                "Enroll Hyper Link":
                  type: string
                  nullable: true
                  format: url
                  example: "https://adminplatform.com/course"
                Stage:
                  type: string
                  nullable: true
                  enum: [مبتدئ, متوسط, متقدم]
                  example: مبتدئ
                Certificate:
                  type: string # Or boolean
                  nullable: true
                  example: يوجد
              required:
                - UserID
                - "Course name"
      responses:
        "201":
          description: Training course created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingCourse'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /admin/courses/{course_id}: # Admin - Single Course
    get:
      summary: Show a specific training course (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to retrieve.
      responses:
        "200":
          description: Training course details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingCourse'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      summary: Update a specific training course (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  format: int64
                  description: User ID of the creator (optional, can reassign).
                  example: 5 # Another user ID
                "Course name":
                  type: string
                  example: Updated Admin Course Name
                Stage:
                  type: string
                  nullable: true
                  enum: [مبتدئ, متوسط, متقدم]
                  example: متقدم
              # Include other updatable course fields
      responses:
        "200":
          description: Training course updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingCourse'
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "422":
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      summary: Delete a specific training course (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the training course to delete.
      responses:
        "204":
          description: Training course deleted successfully.
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Training course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  /admin/company-requests:
    get:
      summary: List pending company creation requests (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of pending company requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompanies' # Should list companies with status 'pending'
              example: # Example showing a pending company with its manager
                current_page: 1
                data:
                  - CompanyID: 2 # Example pending company
                    UserID: 5 # User who requested (should be a manager type)
                    Name: New Company Request
                    Email: request@newcompany.com
                    Phone: "0500000000"
                    Description: This is a new company requesting approval.
                    Country: KSA
                    City: Dammam
                    "Detailed Address": 1st Street
                    Media: null
                    "Web site": https://newcompany.com
                    status: pending
                    created_at: "2025-05-03T09:00:00.000000Z"
                    updated_at: "2025-05-03T09:00:00.000000Z"
                    user: # Manager details who requested
                      UserID: 5
                      first_name: Requesting
                      last_name: Manager
                      username: req_manager
                      email: request@newcompany.com
                      email_verified: 1
                      phone: "0500000000"
                      photo: null
                      status: مفعل
                      type: مدير شركة
                      created_at: "2025-05-03T08:50:00.000000Z"
                      updated_at: "2025-05-03T08:50:00.000000Z"
                      profile: null
                      skills: []
                      company: null
                first_page_url: "..."
                from: 1
                last_page: 1
                last_page_url: "..."
                links: []
                next_page_url: null
                path: "..."
                per_page: 15
                prev_page_url: null
                to: 1
                total: 1


        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /admin/company-requests/{company_id}/approve:
    put:
      summary: Approve a pending company creation request (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: company_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the company request to approve.
      requestBody:
        content: {} # No request body needed
      responses:
        "200":
          description: Company approved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Company approved successfully.
                  company: # Returns the updated company object
                    $ref: '#/components/schemas/Company'
                required:
                  - message
                  - company
              example:
                message: Company approved successfully.
                company:
                  CompanyID: 2
                  UserID: 5
                  Name: New Company Request
                  # ... other details
                  status: approved # Status is now approved
                  created_at: "2025-05-03T09:00:00.000000Z"
                  updated_at: "2025-05-03T12:10:00.000000Z" # Updated timestamp
        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Company not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "400":
          description: Bad Request (Company is not pending).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              example:
                message: Company is not pending approval.

  /admin/company-requests/{company_id}/reject:
    put:
      summary: Reject a pending company creation request (Admin Only).
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: company_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the company request to reject.
      requestBody:
        content: {} # No request body needed
      responses:
        "200":
          description: Company rejected successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Company rejected successfully.
                  company: # Returns the updated company object (if status is set to rejected)
                    $ref: '#/components/schemas/Company'
                required:
                  - message
                  - company
              example:
                message: Company rejected successfully.
                company:
                  CompanyID: 2
                  UserID: 5
                  Name: New Company Request
                  # ... other details
                  status: rejected # Status is now rejected
                  created_at: "2025-05-03T09:00:00.000000Z"
                  updated_at: "2025-05-03T12:15:00.000000Z" # Updated timestamp

        "401":
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        "403":
          description: Forbidden (User is not Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: Company not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "400":
          description: Bad Request (Company is not pending).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              example:
                message: Company is not pending approval.